{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"e1e6c613-2c91-586f-b5e2-59fd84d9bd58","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    title: \"Svelte for React Devs\",\n    mdxType: \"Head\"\n  }), mdx(\"h1\", null, \"Svelte for React Devs\"), mdx(\"h4\", null, \"UI Meetup - 20th Apr 2021\"), mdx(\"h6\", null, \"By Phani Rahul Sivalenka \", mdx(\"a\", {\n    parentName: \"h6\",\n    \"href\": \"https://twitter.com/rahulsivalenka\"\n  }, \"@rahulsivalenka\")), mdx(\"hr\", null), mdx(\"p\", null, \"This talk introduces Svelte to React devs.\"), mdx(\"hr\", null), mdx(\"div\", {\n    className: \"full-width basic-text-slide\"\n  }, mdx(\"h1\", null, \"Where Svelte is strong\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"minimal learning curve\"), \" - as Svelte components are written with almost usual HTML, CSS and JavaScript.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"less code\"), \" - allows us to produce real business logic without additional coding complexities.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"no virtual DOM\"), \" - makes the app even faster.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"lightweight\"), \" - bundles down to around 4 KB when compared to React (around 40KB).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"faster build times\"), \" - improves DX.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"scoped styling out-of-the-box\"), \" - means no CSS leaking unless we intend to\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"in-built state management\"), \" - using stores\"))), mdx(\"hr\", null), mdx(\"div\", {\n    className: \"full-width basic-text-slide\"\n  }, mdx(\"h1\", null, \"Where Svelte falls behind\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"limited ecosystem\"), \" - as it is a relatively new framework, it is not yet adopted widely. The ecosystem of Svelte is still growing and may not fulfill the current requirements of projects. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"missing advanced features\"), \" - advanced features such as offered by React context API and Suspense are not yet available in Svelte\"))), mdx(\"hr\", null), mdx(\"div\", {\n    className: \"full-width basic-text-slide\"\n  }, mdx(\"h1\", null, \"Is Svelte ready for production?\"), mdx(\"div\", {\n    style: {\n      \"fontSize\": \"2.5rem\"\n    }\n  }, mdx(\"p\", {\n    style: {\n      \"color\": \"green\",\n      \"fontSize\": \"4rem\"\n    }\n  }, \"For basic web apps and static sites it would be a perfect fit.\"), mdx(\"p\", {\n    style: {\n      \"color\": \"red\"\n    }\n  }, \"For complex web applications we might have to wait a bit for SvelteKit to come out of \", mdx(\"a\", {\n    href: \"https://svelte.dev/blog/sveltekit-beta\",\n    target: \"_blank\"\n  }, \"beta\"), \".\"), mdx(\"p\", {\n    style: {\n      \"color\": \"orange\"\n    }\n  }, \"It is possible to use \", mdx(\"a\", {\n    href: \"https://sapper.svelte.dev/\",\n    target: \"_blank\"\n  }, \"Sapper\"), \" to build complex web applications. However, Sapper is \", mdx(\"a\", {\n    href: \"https://svelte.dev/blog/whats-the-deal-with-sveltekit\",\n    target: \"_blank\"\n  }, \"discontinued\"), \" with their efforts geared towards SvelteKit.\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Building Blocks\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"component is a JavaScript function\\\"\",\n    \"subtitle\": \"\\\"component\",\n    \"is\": true,\n    \"a\": true,\n    \"JavaScript\": true,\n    \"function\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  let name = 'React';\\n\\n  return (\\n    <p>\\n      Here's a good ol'{' '}\\n      <span\\n        style={{\\n          color: '#61DAFB',\\n        }}\\n      >\\n        {name}\\n      </span>{' '}\\n      component.\\n    </p>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"component is written as plain HTML\\\"\",\n    \"subtitle\": \"\\\"component\",\n    \"is\": true,\n    \"written\": true,\n    \"as\": true,\n    \"plain\": true,\n    \"HTML\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  let name = 'Svelte';\\n</script>\\n\\n<!-- html goes here -->\\n<p>There's a new kid in town. It's name is <span>{name}</span>.</p>\\n\\n<style>\\n  span {\\n    color: #ff3e00;\\n  }\\n</style>\\n\"))), mdx(Step, {\n    title: \"HTML\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:16 subtitle=\\\"returns HTML to be rendered using JSX syntax\\\"\",\n    \"6:16\": true,\n    \"subtitle\": \"\\\"returns\",\n    \"HTML\": true,\n    \"to\": true,\n    \"be\": true,\n    \"rendered\": true,\n    \"using\": true,\n    \"JSX\": true,\n    \"syntax\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"6:7 subtitle=\\\"the component itself is the HTML\\\"\",\n    \"6:7\": true,\n    \"subtitle\": \"\\\"the\",\n    \"component\": true,\n    \"itself\": true,\n    \"is\": true,\n    \"the\": true,\n    \"HTML\\\"\": true\n  }, \"\"))), mdx(Step, {\n    title: \"CSS\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"9:11 subtitle=\\\"can style using inline style object or CSS-in-JS solutions or CSS modules or plain CSS file\\\"\",\n    \"9:11\": true,\n    \"subtitle\": \"\\\"can\",\n    \"style\": true,\n    \"using\": true,\n    \"inline\": true,\n    \"object\": true,\n    \"or\": true,\n    \"CSS-in-JS\": true,\n    \"solutions\": true,\n    \"CSS\": true,\n    \"modules\": true,\n    \"plain\": true,\n    \"file\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:13 subtitle=\\\"styles are written in a style tag\\\"\",\n    \"8:13\": true,\n    \"subtitle\": \"\\\"styles\",\n    \"are\": true,\n    \"written\": true,\n    \"in\": true,\n    \"a\": true,\n    \"style\": true,\n    \"tag\\\"\": true\n  }, \"\"))), mdx(Step, {\n    title: \"JS\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"JavaScript goes directly in the component's function body\\\"\",\n    \"subtitle\": \"\\\"JavaScript\",\n    \"goes\": true,\n    \"directly\": true,\n    \"in\": true,\n    \"the\": true,\n    \"component's\": true,\n    \"function\": true,\n    \"body\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:5 subtitle=\\\"JavaScript goes under a script tag\\\"\",\n    \"2:5\": true,\n    \"subtitle\": \"\\\"JavaScript\",\n    \"goes\": true,\n    \"under\": true,\n    \"a\": true,\n    \"script\": true,\n    \"tag\\\"\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"State\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"direct assignments to the state won't work\\\"\",\n    \"subtitle\": \"\\\"direct\",\n    \"assignments\": true,\n    \"to\": true,\n    \"the\": true,\n    \"state\": true,\n    \"won't\": true,\n    \"work\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  let name = 'React';\\n\\n  const handleChangeName = () => {\\n    name = `why is the name not changing?!! \\uD83D\\uDE21`;\\n  };\\n\\n  return (\\n    <>\\n      <p>{name}</p>\\n      <button onClick={handleChangeName}>Change Name</button>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"direct assignments work to change the state\\\"\",\n    \"subtitle\": \"\\\"direct\",\n    \"assignments\": true,\n    \"work\": true,\n    \"to\": true,\n    \"change\": true,\n    \"the\": true,\n    \"state\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  let name = 'Svelte';\\n  const handleChangeName = () => {\\n    name = 'name changes by simple assignment!! Super Cool! \\uD83D\\uDE0E';\\n  };\\n</script>\\n\\n<!-- html goes here -->\\n<p>{name}</p>\\n<button on:click={handleChangeName}>Change Name</button>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"3,6 subtitle=\\\"need to call a setter method to update state\\\"\",\n    \"3,6\": true,\n    \"subtitle\": \"\\\"need\",\n    \"to\": true,\n    \"call\": true,\n    \"a\": true,\n    \"setter\": true,\n    \"method\": true,\n    \"update\": true,\n    \"state\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  const [name, setName] = React.useState('React');\\n\\n  const handleChangeName = () => {\\n    setName(`lot of work for a simple state update \\uD83D\\uDE22`);\\n  };\\n\\n  return (\\n    <>\\n      <p>{name}</p>\\n      <button onClick={handleChangeName}>Change Name</button>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"3,5 subtitle=\\\"direct assignments work to change the state\\\"\",\n    \"3,5\": true,\n    \"subtitle\": \"\\\"direct\",\n    \"assignments\": true,\n    \"work\": true,\n    \"to\": true,\n    \"change\": true,\n    \"the\": true,\n    \"state\\\"\": true\n  }, \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"state is defined using a special hook called useState\\\"\",\n    \"subtitle\": \"\\\"state\",\n    \"is\": true,\n    \"defined\": true,\n    \"using\": true,\n    \"a\": true,\n    \"special\": true,\n    \"hook\": true,\n    \"called\": true,\n    \"useState\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"state is defined using normal javascript variable declaration\\\"\",\n    \"subtitle\": \"\\\"state\",\n    \"is\": true,\n    \"defined\": true,\n    \"using\": true,\n    \"normal\": true,\n    \"javascript\": true,\n    \"variable\": true,\n    \"declaration\\\"\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Props\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2[29:36] subtitle=\\\"props are extracted from the object passed into the component's constructor\\\"\",\n    \"2[29:36]\": true,\n    \"subtitle\": \"\\\"props\",\n    \"are\": true,\n    \"extracted\": true,\n    \"from\": true,\n    \"the\": true,\n    \"object\": true,\n    \"passed\": true,\n    \"into\": true,\n    \"component's\": true,\n    \"constructor\\\"\": true\n  }, \"// App.js\\nexport default function App({ name }) {\\n  return <p>{name}</p>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"3 subtitle=\\\"props are exposed using export keyword\\\"\",\n    \"subtitle\": \"\\\"props\",\n    \"are\": true,\n    \"exposed\": true,\n    \"using\": true,\n    \"export\": true,\n    \"keyword\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  export let name;\\n</script>\\n\\n<p>{name}</p>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2[29:50] subtitle=\\\"default values for props can be given while destructuring\\\"\",\n    \"2[29:50]\": true,\n    \"subtitle\": \"\\\"default\",\n    \"values\": true,\n    \"for\": true,\n    \"props\": true,\n    \"can\": true,\n    \"be\": true,\n    \"given\": true,\n    \"while\": true,\n    \"destructuring\\\"\": true\n  }, \"// App.js\\nexport default function App({ name = 'a mystery' }) {\\n  return <p>{name}</p>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"3 subtitle=\\\"default values for props can be given in the declaration\\\"\",\n    \"subtitle\": \"\\\"default\",\n    \"values\": true,\n    \"for\": true,\n    \"props\": true,\n    \"can\": true,\n    \"be\": true,\n    \"given\": true,\n    \"in\": true,\n    \"the\": true,\n    \"declaration\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  export let name = 'a mystery';\\n</script>\\n\\n<p>{name}</p>\\n\"))), mdx(Step, {\n    title: \"props are sent in the same way for both React and Svelte\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<App name=\\\"Batman\\\" />\\n\\n<App name={'Batman'} />\\n\\n<App name={42} />\\n\\n<App {...propsObject} />\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!-- same here -->\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"prop without an assignment is considered a boolean\\\"\",\n    \"subtitle\": \"\\\"prop\",\n    \"without\": true,\n    \"an\": true,\n    \"assignment\": true,\n    \"is\": true,\n    \"considered\": true,\n    \"a\": true,\n    \"boolean\\\"\": true\n  }, \"export default function App({ name }) {\\n  return (\\n    <>\\n      {/* expanded here is passed as expanded={true} to Sidebar */}\\n      <Sidebar expanded />\\n\\n      {/* assignment is needed for it to pass the name along */}\\n      <CenterContent name={name} />\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"prop without an assignment is considered a variable to be passed along\\\"\",\n    \"subtitle\": \"\\\"prop\",\n    \"without\": true,\n    \"an\": true,\n    \"assignment\": true,\n    \"is\": true,\n    \"considered\": true,\n    \"a\": true,\n    \"variable\": true,\n    \"to\": true,\n    \"be\": true,\n    \"passed\": true,\n    \"along\\\"\": true\n  }, \"<script>\\n  export let name;\\n</script>\\n\\n<!-- expanded={true} is mandatory else an error is raised saying\\nexpanded is not defined if it is bound as {expanded} -->\\n<Sidebar expanded={true} />\\n\\n<!-- name is passed along with this binding -->\\n<CenterContent {name} />\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Computed State\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"8:10 subtitle=\\\"useEffect is run everytime firstName or lastName change to recompute fullName\\\"\",\n    \"8:10\": true,\n    \"subtitle\": \"\\\"useEffect\",\n    \"is\": true,\n    \"run\": true,\n    \"everytime\": true,\n    \"firstName\": true,\n    \"or\": true,\n    \"lastName\": true,\n    \"change\": true,\n    \"to\": true,\n    \"recompute\": true,\n    \"fullName\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  const [firstName, setFirstName] = useState('Bruce');\\n  const [lastName, setLastName] = useState('Wayne');\\n\\n  const [fullName, setFullName] = useState('Wayne');\\n\\n  React.useEffect(() => {\\n    setFullName(`${firstName} ${lastName}`);\\n  }, [firstName, lastName]);\\n\\n  return <h2>{fullName}</h2>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"6\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"6 subtitle=\\\"using reactive declarations ($:) fullName is recomputed everytime firstName or lastName change\\\"\",\n    \"subtitle\": \"\\\"using\",\n    \"reactive\": true,\n    \"declarations\": true,\n    \"($:)\": true,\n    \"fullName\": true,\n    \"is\": true,\n    \"recomputed\": true,\n    \"everytime\": true,\n    \"firstName\": true,\n    \"or\": true,\n    \"lastName\": true,\n    \"change\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  let firstName = 'Bruce';\\n  let lastName = 'Wayne';\\n\\n  $: fullName = `${firstName} ${lastName}`;\\n</script>\\n\\n<h2>{fullName}</h2>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [COLUMN_THEMES[1], COLUMN_THEMES[1], COLUMN_THEMES[1]],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Svelte: reactivity\",\n    subtitle: \"We're not limited to declaring reactive values \\u2014 we can also run arbitrary statements reactively.\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-html\",\n    \"metastring\": \"3\"\n  }, \"<!-- App.svelte -->\\n<script>\\n  $: console.log(`the count is ${count}`);\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"3:6\",\n    \"3:6\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  $: {\\n    console.log(`the count is ${count}`);\\n    alert(`I SAID THE COUNT IS ${count}`);\\n  }\\n</script>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"3:6\",\n    \"3:6\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  $: if (count >= 10) {\\n    alert(`count is dangerously high!`);\\n    count = 9;\\n  }\\n</script>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [COLUMN_THEMES[1]],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Svelte: reactivity\",\n    subtitle: \"Because Svelte's reactivity is triggered by assignments, using array methods like push and splice won't automatically cause updates\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"6,9\",\n    \"6,9\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  let numbers = [1, 2, 3, 4];\\n\\n  function addNumber() {\\n    numbers.push(numbers.length + 1);\\n  }\\n\\n  $: sum = numbers.reduce((t, n) => t + n, 0);\\n</script>\\n\\n<p>{numbers.join(' + ')} = {sum}</p>\\n\\n<button on:click={addNumber}>Add a number</button>\\n\"))), mdx(Step, {\n    title: \"Svelte: reactivity\",\n    subtitle: \"relies on immutability\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!-- App.svelte -->\\n<script>\\n  let numbers = [1, 2, 3, 4];\\n\\n  function addNumber() {\\n    numbers = [...numbers, numbers.length + 1];\\n  }\\n\\n  $: sum = numbers.reduce((t, n) => t + n, 0);\\n</script>\\n\\n<p>{numbers.join(' + ')} = {sum}</p>\\n\\n<button on:click={addNumber}>Add a number</button>\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Conditionals\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"// App.js\\nconst DEFAULT_USER = {\\n  loggedIn: false,\\n};\\nexport default function App({ user = DEFAULT_USER }) {\\n  if (user.loggedIn) {\\n    return (\\n      <button onClick={toggle}>Log out</button>\\n    );\\n  }\\n  \\n  return (\\n    <button onClick={toggle}>Log in</button>;\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<!-- App.svelte -->\\n<script>\\n  export let user = { loggedIn: false };\\n\\n  const toggle = () => {\\n    // ...\\n  };\\n</script>\\n\\n{#if user.loggedIn}\\n  <button on:click={toggle}>Log out</button>\\n{/if}\\n\\n{#if !user.loggedIn}\\n  <button on:click={toggle}>Log in</button>\\n{/if}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"6:10\",\n    \"6:10\": true\n  }, \"// App.js\\nconst DEFAULT_USER = {\\n  loggedIn: false,\\n};\\nexport default function App({ user = DEFAULT_USER }) {\\n  return user.loggedIn ? (\\n    <button onClick={toggle}>Log out</button>\\n  ) : (\\n    <button onClick={toggle}>Log in</button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"10,12,14 subtitle=\\\"# => block opening tag. / => block closing tag. : character, as in {:else} => block continuation tag\\\"\",\n    \"10,12,14\": true,\n    \"subtitle\": \"\\\"#\",\n    \"\": \">\",\n    \"block\": true,\n    \"opening\": true,\n    \"tag.\": true,\n    \"/\": true,\n    \"closing\": true,\n    \":\": true,\n    \"character,\": true,\n    \"as\": true,\n    \"in\": true,\n    \"{:else}\": true,\n    \"continuation\": true,\n    \"tag\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  export let user = { loggedIn: false };\\n\\n  const toggle = () => {\\n    // ...\\n  };\\n</script>\\n\\n{#if user.loggedIn}\\n  <button on:click={toggle}>Log out</button>\\n{:else}\\n  <button on:click={toggle}>Log in</button>\\n{/if}\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Loops\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"14:22 subtitle=\\\".map is used to loop in JSX\\\"\",\n    \"14:22\": true,\n    \"subtitle\": \"\\\".map\",\n    \"is\": true,\n    \"used\": true,\n    \"to\": true,\n    \"loop\": true,\n    \"in\": true,\n    \"JSX\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  const cats = [\\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\\n        { id: 'z_AbfPXTKms', name: 'Maru' },\\n        { id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\\n    ];\\n  \\n  return (\\n    <>\\n      <h1>The Famous Cats of YouTube</h1>\\n\\n      <ul>\\n        {cats.map((cat, i) => (\\n          <li>\\n            <a target=\\\"_blank\\\"\\n              href={`https://www.youtube.com/watch?v=${cat.id}`}\\n            >\\n              {i + 1}: {cat.name}\\n            </a>\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"13:21 subtitle=\\\"each is used to loop in Svelte\\\"\",\n    \"13:21\": true,\n    \"subtitle\": \"\\\"each\",\n    \"is\": true,\n    \"used\": true,\n    \"to\": true,\n    \"loop\": true,\n    \"in\": true,\n    \"Svelte\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n    const cats = [\\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\\n        { id: 'z_AbfPXTKms', name: 'Maru' },\\n        { id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\\n    ];\\n</script>\\n\\n<h1>The Famous Cats of YouTube</h1>\\n\\n<ul>\\n    {#each cats as cat, i}\\n    <li>\\n      <a target=\\\"_blank\\\"\\n         href=\\\"https://www.youtube.com/watch?v={cat.id}\\\"\\n      >\\n        {i + 1}: {cat.name}\\n      </a>\\n    </li>\\n    {/each}\\n</ul>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\".map is used to loop in JSX\\\"\",\n    \"subtitle\": \"\\\".map\",\n    \"is\": true,\n    \"used\": true,\n    \"to\": true,\n    \"loop\": true,\n    \"in\": true,\n    \"JSX\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  const cats = [\\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\\n        { id: 'z_AbfPXTKms', name: 'Maru' },\\n        { id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\\n    ];\\n  \\n  return (\\n    <>\\n      <h1>The Famous Cats of YouTube</h1>\\n\\n      <ul>\\n        {cats.map(({ id, name }, i) => (\\n          <li>\\n            <a target=\\\"_blank\\\"\\n              href={`https://www.youtube.com/watch?v=${id}`}\\n            >\\n              {i + 1}: {name}\\n            </a>\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"each is used to loop in Svelte\\\"\",\n    \"subtitle\": \"\\\"each\",\n    \"is\": true,\n    \"used\": true,\n    \"to\": true,\n    \"loop\": true,\n    \"in\": true,\n    \"Svelte\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n    const cats = [\\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\\n        { id: 'z_AbfPXTKms', name: 'Maru' },\\n        { id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\\n    ];\\n</script>\\n\\n<h1>The Famous Cats of YouTube</h1>\\n\\n<ul>\\n    {#each cats as { id, name }, i}\\n    <li>\\n      <a target=\\\"_blank\\\"\\n         href=\\\"https://www.youtube.com/watch?v={id}\\\"\\n      >\\n        {i + 1}: {name}\\n      </a>\\n    </li>\\n    {/each}\\n</ul>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"a key={id} tells React how to figure our what changed\\\"\",\n    \"subtitle\": \"\\\"a\",\n    \"key\": \"{id}\",\n    \"tells\": true,\n    \"React\": true,\n    \"how\": true,\n    \"to\": true,\n    \"figure\": true,\n    \"our\": true,\n    \"what\": true,\n    \"changed\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  const cats = [\\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\\n        { id: 'z_AbfPXTKms', name: 'Maru' },\\n        { id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\\n    ];\\n  \\n  return (\\n    <>\\n      <h1>The Famous Cats of YouTube</h1>\\n\\n      <ul>\\n        {cats.map(({ id, name }, i) => (\\n          <li key={id}>\\n            <a target=\\\"_blank\\\"\\n              href={`https://www.youtube.com/watch?v=${id}`}\\n            >\\n              {i + 1}: {name}\\n            </a>\\n          </li>\\n        ))}\\n      </ul>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"a (id) here tells React how to figure our what changed\\\"\",\n    \"subtitle\": \"\\\"a\",\n    \"(id)\": true,\n    \"here\": true,\n    \"tells\": true,\n    \"React\": true,\n    \"how\": true,\n    \"to\": true,\n    \"figure\": true,\n    \"our\": true,\n    \"what\": true,\n    \"changed\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n    const cats = [\\n        { id: 'J---aiyznGQ', name: 'Keyboard Cat' },\\n        { id: 'z_AbfPXTKms', name: 'Maru' },\\n        { id: 'OUtn3pvWmpg', name: 'Henri The Existential Cat' }\\n    ];\\n</script>\\n\\n<h1>The Famous Cats of YouTube</h1>\\n\\n<ul>\\n    {#each cats as { id, name } (id), i}\\n    <li>\\n      <a target=\\\"_blank\\\"\\n         href=\\\"https://www.youtube.com/watch?v={id}\\\"\\n      >\\n        {i + 1}: {name}\\n      </a>\\n    </li>\\n    {/each}\\n</ul>\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Asynchronous data\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    subtitle: \"consider an API call like so\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:10\",\n    \"1:10\": true\n  }, \"async function getRandomNumber() {\\n  const res = await fetch(`api/random-number`);\\n  const text = await res.text();\\n\\n  if (res.ok) {\\n    return text;\\n  } else {\\n    throw new Error(text);\\n  }\\n}\\n\\nexport default function App() {\\n  const [loading, setLoading] = React.useState(null);\\n  const [number, setNumber] = React.useState(null);\\n  const [error, setError] = React.useState(null);\\n\\n  React.useEffect(() => {\\n    (async () => {\\n      setLoading(true);\\n      try {\\n        setNumber(await getRandomNumber());\\n      } catch(err) {\\n        setError(err.message);\\n      }\\n      setLoading(false);\\n    })();\\n  }, []);\\n\\n  const handleClick = () => {\\n    setLoading(true);\\n    try {\\n      setNumber(await getRandomNumber());\\n    } catch(err) {\\n      setError(err.message);\\n    }\\n    setLoading(false);\\n  }\\n\\n  const result = loading \\n    ? <p>...waiting</p>\\n    : error\\n    ? <p style=\\\"color: red\\\">{error.message}</p>\\n    : <p>The number is {number}</p>;\\n\\n  return (\\n    <>\\n      <button onClick={handleClick}>generate random number</button>\\n\\n      {result}\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"2:11\",\n    \"2:11\": true\n  }, \"<script>\\n    async function getRandomNumber() {\\n        const res = await fetch(`api/random-number`);\\n        const text = await res.text();\\n\\n        if (res.ok) {\\n            return text;\\n        } else {\\n            throw new Error(text);\\n        }\\n    }\\n\\n    let promise = getRandomNumber();\\n\\n    function handleClick() {\\n        promise = getRandomNumber();\\n    }\\n</script>\\n\\n<button on:click={handleClick}>\\n    generate random number\\n</button>\\n\\n{#await promise}\\n    <p>...waiting</p>\\n{:then number}\\n    <p>The number is {number}</p>\\n{:catch error}\\n    <p style=\\\"color: red\\\">{error.message}</p>\\n{/await}\\n\"))), mdx(Step, {\n    subtitle: \"to make an API call\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"11:52\",\n    \"11:52\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:30\",\n    \"13:30\": true\n  }, \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:44 subtitle=\\\"most of the work is done in JS\\\"\",\n    \"13:44\": true,\n    \"subtitle\": \"\\\"most\",\n    \"of\": true,\n    \"the\": true,\n    \"work\": true,\n    \"is\": true,\n    \"done\": true,\n    \"in\": true,\n    \"JS\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"13:17,24:30 subtitle=\\\"most of the work can be done in markup\\\"\",\n    \"13:17,24:30\": true,\n    \"subtitle\": \"\\\"most\",\n    \"of\": true,\n    \"the\": true,\n    \"work\": true,\n    \"can\": true,\n    \"be\": true,\n    \"done\": true,\n    \"in\": true,\n    \"markup\\\"\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(\"p\", null, \"Events\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"DOM events can be listened using on... prefix\\\"\",\n    \"subtitle\": \"\\\"DOM\",\n    \"events\": true,\n    \"can\": true,\n    \"be\": true,\n    \"listened\": true,\n    \"using\": true,\n    \"on...\": true,\n    \"prefix\\\"\": true\n  }, \"<div onMousemove={handleMousemove}>\\n    The mouse position is {m.x} x {m.y}\\n</div>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"DOM events can be listened using on: directive\\\"\",\n    \"subtitle\": \"\\\"DOM\",\n    \"events\": true,\n    \"can\": true,\n    \"be\": true,\n    \"listened\": true,\n    \"using\": true,\n    \"on:\": true,\n    \"directive\\\"\": true\n  }, \"<div on:mousemove={handleMousemove}>\\n    The mouse position is {m.x} x {m.y}\\n</div>\\n\"))), mdx(Step, {\n    subtitle: \"handlers can be inline\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<div onMousemove={e => setM({\\n  x: e.clientX, y: e.clientY\\n})}>\\n    The mouse position is {m.x} x {m.y}\\n</div>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<div on:mousemove=\\\"{e => m = { x: e.clientX, y: e.clientY }}\\\">\\n    The mouse position is {m.x} x {m.y}\\n</div>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"event modifiers have to applied in JS\\\"\",\n    \"subtitle\": \"\\\"event\",\n    \"modifiers\": true,\n    \"have\": true,\n    \"to\": true,\n    \"applied\": true,\n    \"in\": true,\n    \"JS\\\"\": true\n  }, \"<div onMousemove={e => {\\n  e.preventDefault();\\n  setM({\\n    x: e.clientX, y: e.clientY\\n  })\\n}}>\\n    The mouse position is {m.x} x {m.y}\\n</div>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"event modifiers are applied using pipe (|). They can also be chained like on:click|once|capture={...}\\\"\",\n    \"subtitle\": \"\\\"event\",\n    \"modifiers\": true,\n    \"are\": true,\n    \"applied\": true,\n    \"using\": true,\n    \"pipe\": true,\n    \"(|).\": true,\n    \"They\": true,\n    \"can\": true,\n    \"also\": true,\n    \"be\": true,\n    \"chained\": true,\n    \"like\": true,\n    \"on:click|once|capture\": \"{...}\\\"\"\n  }, \"<div on:mousemove|preventDefault=\\\"{e => m = { x: e.clientX, y: e.clientY }}\\\">\\n    The mouse position is {m.x} x {m.y}\\n</div>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:13 subtitle=\\\"component events are nothing but method props\\\"\",\n    \"1:13\": true,\n    \"subtitle\": \"\\\"component\",\n    \"events\": true,\n    \"are\": true,\n    \"nothing\": true,\n    \"but\": true,\n    \"method\": true,\n    \"props\\\"\": true\n  }, \"// Inner.js\\nexport default function Inner({ onMessage }) {\\n  const sayHello = () => {\\n    onMessage({\\n      text: 'Hello!'\\n    })\\n  }\\n  return (\\n    <button onClick={sayHello}>\\n      Click to say hello\\n    </button>\\n  )\\n}\\n\\n// App.js\\nimport Inner from './Inner';\\n\\nexport default function App() {\\n  const handleMessage = (event) => alert(event.text);\\n  return <Inner onMessage={handleMessage} />\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"1:16 subtitle=\\\"component events are dispatched using a special createEventDispatcher method\\\"\",\n    \"1:16\": true,\n    \"subtitle\": \"\\\"component\",\n    \"events\": true,\n    \"are\": true,\n    \"dispatched\": true,\n    \"using\": true,\n    \"a\": true,\n    \"special\": true,\n    \"createEventDispatcher\": true,\n    \"method\\\"\": true\n  }, \"<!-- Inner.svelte -->\\n<script>\\n    import { createEventDispatcher } from 'svelte';\\n\\n    const dispatch = createEventDispatcher();\\n\\n    function sayHello() {\\n        dispatch('message', {\\n            text: 'Hello!'\\n        });\\n    }\\n</script>\\n\\n<button on:click={sayHello}>\\n    Click to say hello\\n</button>\\n\\n<!-- App.svelte -->\\n<script>\\n    import Inner from './Inner.svelte';\\n\\n    function handleMessage(event) {\\n        alert(event.detail.text);\\n    }\\n</script>\\n\\n<Inner on:message={handleMessage}/>\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"14:21 subtitle=\\\"handled by binding a function to the method prop of the event\\\"\",\n    \"14:21\": true,\n    \"subtitle\": \"\\\"handled\",\n    \"by\": true,\n    \"binding\": true,\n    \"a\": true,\n    \"function\": true,\n    \"to\": true,\n    \"the\": true,\n    \"method\": true,\n    \"prop\": true,\n    \"of\": true,\n    \"event\\\"\": true\n  }, \"\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-diff\",\n    \"metastring\": \"17:28 subtitle=\\\"handled by binding a function to on:<eventName> (on:message here) directive\\\"\",\n    \"17:28\": true,\n    \"subtitle\": \"\\\"handled\",\n    \"by\": true,\n    \"binding\": true,\n    \"a\": true,\n    \"function\": true,\n    \"to\": true,\n    \"on:<eventName>\": true,\n    \"(on:message\": true,\n    \"here)\": true,\n    \"directive\\\"\": true\n  }, \"\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Input Binding\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"input binding is done with the help of value and onChange event\\\"\",\n    \"subtitle\": \"\\\"input\",\n    \"binding\": true,\n    \"is\": true,\n    \"done\": true,\n    \"with\": true,\n    \"the\": true,\n    \"help\": true,\n    \"of\": true,\n    \"value\": true,\n    \"and\": true,\n    \"onChange\": true,\n    \"event\\\"\": true\n  }, \"export default function App() {\\n  const [name, setName] = React.useState('world');\\n  const [confirmed, setConfirmed] = React.useState(false);\\n\\n  return (\\n    <>\\n      <input value={name} onChange={e => setName(e.target.value)} />\\n      <input type=\\\"checkbox\\\" value={confirmed}\\n             onChange={e => setConfirmed(e.target.checked)} />\\n\\n      <h1>Hello {name}! {confirmed ? 'Confirmed!'}</h1>\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"input binding is done using bind:<property> directive (bind:value here)\\\"\",\n    \"subtitle\": \"\\\"input\",\n    \"binding\": true,\n    \"is\": true,\n    \"done\": true,\n    \"using\": true,\n    \"bind:<property>\": true,\n    \"directive\": true,\n    \"(bind:value\": true,\n    \"here)\\\"\": true\n  }, \"<script>\\n    let name = 'world';\\n    let confirmed = false;\\n</script>\\n\\n<input bind:value={name}>\\n<input type=checkbox bind:checked={confirmed}>\\n\\n<h1>Hello {name}!\\n{#if yes}\\n    Confirmed!\\n{/if}\\n</h1>\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Element Refs\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"element ref can be obtained using useRef\\\"\",\n    \"subtitle\": \"\\\"element\",\n    \"ref\": true,\n    \"can\": true,\n    \"be\": true,\n    \"obtained\": true,\n    \"using\": true,\n    \"useRef\\\"\": true\n  }, \"export default function App() {\\n  const divRef = React.useRef();\\n\\n  useEffect(() => {\\n    console.log(divRef.current.scrollHeight);\\n  }, []);\\n\\n  return (\\n    <div ref={divRef}>\\n      Hello World!\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"element ref can be obtained using bind:this directive\\\"\",\n    \"subtitle\": \"\\\"element\",\n    \"ref\": true,\n    \"can\": true,\n    \"be\": true,\n    \"obtained\": true,\n    \"using\": true,\n    \"bind:this\": true,\n    \"directive\\\"\": true\n  }, \"<script>\\n    import { onMount } from 'svelte'\\n    let divRef;\\n\\n  onMount(() => console.log(divRef.scrollHeight));\\n</script>\\n\\n<div bind:this={divRef}>\\n  Hello World!\\n</div>\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Lifecycle\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Mount\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"useEffect with an empty dependency array acts as componentDidMount\\\"\",\n    \"subtitle\": \"\\\"useEffect\",\n    \"with\": true,\n    \"an\": true,\n    \"empty\": true,\n    \"dependency\": true,\n    \"array\": true,\n    \"acts\": true,\n    \"as\": true,\n    \"componentDidMount\\\"\": true\n  }, \"// componentDidMount\\n// useEffect callback cannot be directly marked with async\\nReact.useEffect(() => {\\n  const makeCall = async () => {\\n    const res = await fetch(\\n      `https://jsonplaceholder.typicode.com/photos?_limit=20`\\n    );\\n        setPhotos(await res.json());\\n  }\\n\\n  makeCall();\\n}, [])\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"onMount is used to detect when component is mounted\\\"\",\n    \"subtitle\": \"\\\"onMount\",\n    \"is\": true,\n    \"used\": true,\n    \"to\": true,\n    \"detect\": true,\n    \"when\": true,\n    \"component\": true,\n    \"mounted\\\"\": true\n  }, \"<script>\\n  import { onMount } from 'svelte';\\n\\n  let photos = [];\\n\\n  onMount(async () => {\\n    const res = await fetch(\\n      `https://jsonplaceholder.typicode.com/photos?_limit=20`\\n    );\\n        photos = await res.json();\\n  });\\n</script>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Destroy\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"useEffect can have an optional return function which is called on component destroy\\\"\",\n    \"subtitle\": \"\\\"useEffect\",\n    \"can\": true,\n    \"have\": true,\n    \"an\": true,\n    \"optional\": true,\n    \"return\": true,\n    \"function\": true,\n    \"which\": true,\n    \"is\": true,\n    \"called\": true,\n    \"on\": true,\n    \"component\": true,\n    \"destroy\\\"\": true\n  }, \"// componentDidMount\\nReact.useEffect(() => {\\n  const interval = setInterval(\\n    () => setSeconds(seconds => seconds += 1),\\n    1000\\n  );\\n\\n  return () => {\\n    // this is called when component is destroyed\\n    clearInterval(interval);\\n  } \\n}, [])\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"onDestroy is used to detect when component is mounted\\\"\",\n    \"subtitle\": \"\\\"onDestroy\",\n    \"is\": true,\n    \"used\": true,\n    \"to\": true,\n    \"detect\": true,\n    \"when\": true,\n    \"component\": true,\n    \"mounted\\\"\": true\n  }, \"<script>\\n    import { onDestroy } from 'svelte';\\n\\n    let seconds = 0;\\n    const interval = setInterval(() => seconds += 1, 1000);\\n\\n    onDestroy(() => clearInterval(interval));\\n</script>\\n\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Update\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"useEffect with dependencies is called whenever any of those dependencies change\\\"\",\n    \"subtitle\": \"\\\"useEffect\",\n    \"with\": true,\n    \"dependencies\": true,\n    \"is\": true,\n    \"called\": true,\n    \"whenever\": true,\n    \"any\": true,\n    \"of\": true,\n    \"those\": true,\n    \"change\\\"\": true\n  }, \"// componentDidUpdate\\nReact.useEffect(() => {\\n  // ...\\n}, [dependencies])\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"beforeUpdate and afterUpdate functions are used to listen to updates\\\"\",\n    \"subtitle\": \"\\\"beforeUpdate\",\n    \"and\": true,\n    \"afterUpdate\": true,\n    \"functions\": true,\n    \"are\": true,\n    \"used\": true,\n    \"to\": true,\n    \"listen\": true,\n    \"updates\\\"\": true\n  }, \"<script>\\n  import { beforeUpdate, afterUpdate } from 'svelte';\\n\\n  beforeUpdate(() => {\\n    // schedules work to happen immediately before the DOM is updated\\n  });\\n\\n  afterUpdate(() => {\\n    // used for running code once the DOM is in sync with your data.\\n  });\\n</script>\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Actions\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"Custom hooks can be used to reuse functionality applied to an element\\\"\",\n    \"subtitle\": \"\\\"Custom\",\n    \"hooks\": true,\n    \"can\": true,\n    \"be\": true,\n    \"used\": true,\n    \"to\": true,\n    \"reuse\": true,\n    \"functionality\": true,\n    \"applied\": true,\n    \"an\": true,\n    \"element\\\"\": true\n  }, \"// useOnOutsideClick.js\\nexport function useOnOutsideClick(ref, handler) {\\n  useEffect(\\n    () => {\\n      const listener = (event) => {\\n        // Do nothing if clicking ref's element or descendent elements\\n        if (!ref.current || ref.current.contains(event.target)) {\\n          return;\\n        }\\n        handler(event);\\n      };\\n\\n      document.addEventListener(\\\"mousedown\\\", listener);\\n      document.addEventListener(\\\"touchstart\\\", listener);\\n\\n      return () => {\\n        // on un-mount cleanup\\n        document.removeEventListener(\\\"mousedown\\\", listener);\\n        document.removeEventListener(\\\"touchstart\\\", listener);\\n      };\\n    },\\n    [ref, handler]\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"subtitle=\\\"Actions can be used to reuse functionality applied to an element\\\"\",\n    \"subtitle\": \"\\\"Actions\",\n    \"can\": true,\n    \"be\": true,\n    \"used\": true,\n    \"to\": true,\n    \"reuse\": true,\n    \"functionality\": true,\n    \"applied\": true,\n    \"an\": true,\n    \"element\\\"\": true\n  }, \"// onOutsideClick.js\\nexport function onOutsideClick(node) {\\n  const listener = (event) => {\\n    // Do nothing if clicking ref's element or descendent elements\\n    if (!node || node.contains(event.target)) {\\n      return;\\n    }\\n    node.dispatchEvent(new CustomEvent('outsideclick'));\\n  };\\n\\n  document.addEventListener(\\\"mousedown\\\", listener);\\n  document.addEventListener(\\\"touchstart\\\", listener);\\n  \\n  return {\\n    destroy() {\\n      // on destroy cleanup\\n      document.removeEventListener(\\\"mousedown\\\", listener);\\n      document.removeEventListener(\\\"touchstart\\\", listener);\\n    }\\n  };\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"Custom hooks are used just as we use built-in hooks\\\"\",\n    \"subtitle\": \"\\\"Custom\",\n    \"hooks\": true,\n    \"are\": true,\n    \"used\": true,\n    \"just\": true,\n    \"as\": true,\n    \"we\": true,\n    \"use\": true,\n    \"built-in\": true,\n    \"hooks\\\"\": true\n  }, \"// App.js\\nimport { useOnOutsideClick } from './useOnOutsideClick';\\n\\nfunction App() {\\n  const divRef = useRef();\\n\\n  useOnOutsideClick(divRef, () => console.log('clicked outside the element'))\\n\\n  return (\\n    <div ref={divRef}>\\n      Content\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"Actions are used using 'use' directive\\\"\",\n    \"subtitle\": \"\\\"Actions\",\n    \"are\": true,\n    \"used\": true,\n    \"using\": true,\n    \"'use'\": true,\n    \"directive\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script???>\\n  import { onOutsideClick } from './onOutsideClick';\\n\\n  function handleOutsideClick() {\\n    console.log('clicked outside the element')\\n  }\\n</script???>\\n\\n<div\\n  use:onOutsideClick\\n  on:outsideclick={handleOutsideClick}\\n>\\n  Content\\n</div>\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, \"Component Composition\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"Component composition\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"is achieved using 'children' prop\\\"\",\n    \"subtitle\": \"\\\"is\",\n    \"achieved\": true,\n    \"using\": true,\n    \"'children'\": true,\n    \"prop\\\"\": true\n  }, \"// Box.js\\nexport default function Box({ children }) {\\n  return (\\n    <div className=\\\"box\\\">\\n      {children}\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"is achieved using 'slot' tag\\\"\",\n    \"subtitle\": \"\\\"is\",\n    \"achieved\": true,\n    \"using\": true,\n    \"'slot'\": true,\n    \"tag\\\"\": true\n  }, \"<!-- Box.svelte -->\\n<div class=\\\"box\\\">\\n  <slot></slot>\\n</div>\\n\"))), mdx(Step, {\n    title: \"Component composition\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"and composed children are sent between open and close braces of component\\\"\",\n    \"subtitle\": \"\\\"and\",\n    \"composed\": true,\n    \"children\": true,\n    \"are\": true,\n    \"sent\": true,\n    \"between\": true,\n    \"open\": true,\n    \"and\": true,\n    \"close\": true,\n    \"braces\": true,\n    \"of\": true,\n    \"component\\\"\": true\n  }, \"// App.js\\nimport Box from './Box';\\n\\nexport default function App() {\\n  return (\\n    <Box>\\n      <h2>The Box</h2>\\n      <p>This is wrapped with a box.</p>\\n    </Box>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"same here\\\"\",\n    \"subtitle\": \"\\\"same\",\n    \"here\\\"\": true\n  }, \"<!-- App.svelte -->\\n<script>\\n  import Box from './Box.svelte';\\n</script>\\n\\n<Box>\\n  <h2>The Box</h2>\\n  <p>This is wrapped with a box.</p>\\n</Box>\\n\"))), mdx(Step, {\n    title: \"Component composition: Named\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"naming children can be achieved by defining props for each named ones\\\"\",\n    \"subtitle\": \"\\\"naming\",\n    \"children\": true,\n    \"can\": true,\n    \"be\": true,\n    \"achieved\": true,\n    \"by\": true,\n    \"defining\": true,\n    \"props\": true,\n    \"for\": true,\n    \"each\": true,\n    \"named\": true,\n    \"ones\\\"\": true\n  }, \"// Viewport.js\\nexport default function Viewport({ center, left, top }) {\\n  return (\\n    <>\\n      <header>\\n        {top ?? (<p>Unknown</p>)}\\n      </header>\\n      \\n      <aside>\\n        {left ?? (<p>Unknown</p>)}\\n      </aside>\\n      \\n      <main>\\n        {center ?? (<p>Unknown</p>)}\\n      </main>\\n    </>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"here by using the 'name' attribute on 'slot' element\\\"\",\n    \"subtitle\": \"\\\"here\",\n    \"by\": true,\n    \"using\": true,\n    \"the\": true,\n    \"'name'\": true,\n    \"attribute\": true,\n    \"on\": true,\n    \"'slot'\": true,\n    \"element\\\"\": true\n  }, \"<!-- Viewport.svelte -->\\n<header>\\n  <slot name=\\\"top\\\">\\n    <!-- fallback to render -->\\n    <p>Unknown</p>\\n  </slot>\\n</header>\\n\\n<aside>\\n  <slot name=\\\"left\\\">\\n    <p>Unknown</p>\\n  </slot>\\n</aside>\\n\\n<main>\\n  <slot name=\\\"center\\\">\\n    <p>Unknown</p>\\n  </slot>\\n</main>\\n\"))), mdx(Step, {\n    title: \"Component composition: Named\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"can be sent in using the corresponding named props\\\"\",\n    \"subtitle\": \"\\\"can\",\n    \"be\": true,\n    \"sent\": true,\n    \"in\": true,\n    \"using\": true,\n    \"the\": true,\n    \"corresponding\": true,\n    \"named\": true,\n    \"props\\\"\": true\n  }, \"// App.js\\nexport default function App() {\\n  return (\\n    <Viewport \\n      center={<div>Center</div>}\\n      left={<div>Left</div>}\\n      top={<div>Top</div>}\\n    />\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\",\n    \"metastring\": \"subtitle=\\\"here by using the 'name' attribute on 'slot' element\\\"\",\n    \"subtitle\": \"\\\"here\",\n    \"by\": true,\n    \"using\": true,\n    \"the\": true,\n    \"'name'\": true,\n    \"attribute\": true,\n    \"on\": true,\n    \"'slot'\": true,\n    \"element\\\"\": true\n  }, \"<!-- App.svelte -->\\n<Viewport>\\n  <div slot=\\\"center\\\">Center</div>\\n  <div slot=\\\"left\\\">Left</div>\\n  <div slot=\\\"top\\\">Top</div>\\n</Viewport>\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"Thank You\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"e1e6c613-2c91-586f-b5e2-59fd84d9bd58","slug":"/ui-meetup-svelte-for-react-devs","title":"Svelte for React Devs"}},"staticQueryHashes":[]}